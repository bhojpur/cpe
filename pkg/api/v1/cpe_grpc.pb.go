// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CpeServiceClient is the client API for CpeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpeServiceClient interface {
	// StartLocalDcim starts a Data Center Infrastructure Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cpe/config.yaml
	//   3. all bytes constituting the Data Center Infrastructure Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDcim(ctx context.Context, opts ...grpc.CallOption) (CpeService_StartLocalDcimClient, error)
	// StartFromPreviousDcim starts a new Data Center Infrastructure Manager based on a previous one.
	// If the previous Data Center Infrastructure Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDcim(ctx context.Context, in *StartFromPreviousDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error)
	// StartDcimRequest starts a new Data Center Infrastructure Manager based on its specification.
	StartDcim(ctx context.Context, in *StartDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error)
	// Searches for Data Center Infrastructure Manager(s) known to this instance
	ListDcims(ctx context.Context, in *ListDcimsRequest, opts ...grpc.CallOption) (*ListDcimsResponse, error)
	// Subscribe listens to new Data Center Infrastructure Manager(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CpeService_SubscribeClient, error)
	// GetDcim retrieves details of a single Data Center Infrastructure Manager
	GetDcim(ctx context.Context, in *GetDcimRequest, opts ...grpc.CallOption) (*GetDcimResponse, error)
	// Listen listens to Data Center Infrastructure Manager updates and log output of a running Data Center Infrastructure Manager
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CpeService_ListenClient, error)
	// StopDcim stops a currently running Data Center Infrastructure Manager
	StopDcim(ctx context.Context, in *StopDcimRequest, opts ...grpc.CallOption) (*StopDcimResponse, error)
}

type cpeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCpeServiceClient(cc grpc.ClientConnInterface) CpeServiceClient {
	return &cpeServiceClient{cc}
}

func (c *cpeServiceClient) StartLocalDcim(ctx context.Context, opts ...grpc.CallOption) (CpeService_StartLocalDcimClient, error) {
	stream, err := c.cc.NewStream(ctx, &CpeService_ServiceDesc.Streams[0], "/v1.CpeService/StartLocalDcim", opts...)
	if err != nil {
		return nil, err
	}
	x := &cpeServiceStartLocalDcimClient{stream}
	return x, nil
}

type CpeService_StartLocalDcimClient interface {
	Send(*StartLocalDcimRequest) error
	CloseAndRecv() (*StartDcimResponse, error)
	grpc.ClientStream
}

type cpeServiceStartLocalDcimClient struct {
	grpc.ClientStream
}

func (x *cpeServiceStartLocalDcimClient) Send(m *StartLocalDcimRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cpeServiceStartLocalDcimClient) CloseAndRecv() (*StartDcimResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDcimResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cpeServiceClient) StartFromPreviousDcim(ctx context.Context, in *StartFromPreviousDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error) {
	out := new(StartDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.CpeService/StartFromPreviousDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpeServiceClient) StartDcim(ctx context.Context, in *StartDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error) {
	out := new(StartDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.CpeService/StartDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpeServiceClient) ListDcims(ctx context.Context, in *ListDcimsRequest, opts ...grpc.CallOption) (*ListDcimsResponse, error) {
	out := new(ListDcimsResponse)
	err := c.cc.Invoke(ctx, "/v1.CpeService/ListDcims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpeServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CpeService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CpeService_ServiceDesc.Streams[1], "/v1.CpeService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cpeServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CpeService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type cpeServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *cpeServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cpeServiceClient) GetDcim(ctx context.Context, in *GetDcimRequest, opts ...grpc.CallOption) (*GetDcimResponse, error) {
	out := new(GetDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.CpeService/GetDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpeServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CpeService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &CpeService_ServiceDesc.Streams[2], "/v1.CpeService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &cpeServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CpeService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type cpeServiceListenClient struct {
	grpc.ClientStream
}

func (x *cpeServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cpeServiceClient) StopDcim(ctx context.Context, in *StopDcimRequest, opts ...grpc.CallOption) (*StopDcimResponse, error) {
	out := new(StopDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.CpeService/StopDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpeServiceServer is the server API for CpeService service.
// All implementations must embed UnimplementedCpeServiceServer
// for forward compatibility
type CpeServiceServer interface {
	// StartLocalDcim starts a Data Center Infrastructure Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cpe/config.yaml
	//   3. all bytes constituting the Data Center Infrastructure Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDcim(CpeService_StartLocalDcimServer) error
	// StartFromPreviousDcim starts a new Data Center Infrastructure Manager based on a previous one.
	// If the previous Data Center Infrastructure Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDcim(context.Context, *StartFromPreviousDcimRequest) (*StartDcimResponse, error)
	// StartDcimRequest starts a new Data Center Infrastructure Manager based on its specification.
	StartDcim(context.Context, *StartDcimRequest) (*StartDcimResponse, error)
	// Searches for Data Center Infrastructure Manager(s) known to this instance
	ListDcims(context.Context, *ListDcimsRequest) (*ListDcimsResponse, error)
	// Subscribe listens to new Data Center Infrastructure Manager(s) updates
	Subscribe(*SubscribeRequest, CpeService_SubscribeServer) error
	// GetDcim retrieves details of a single Data Center Infrastructure Manager
	GetDcim(context.Context, *GetDcimRequest) (*GetDcimResponse, error)
	// Listen listens to Data Center Infrastructure Manager updates and log output of a running Data Center Infrastructure Manager
	Listen(*ListenRequest, CpeService_ListenServer) error
	// StopDcim stops a currently running Data Center Infrastructure Manager
	StopDcim(context.Context, *StopDcimRequest) (*StopDcimResponse, error)
	mustEmbedUnimplementedCpeServiceServer()
}

// UnimplementedCpeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCpeServiceServer struct {
}

func (UnimplementedCpeServiceServer) StartLocalDcim(CpeService_StartLocalDcimServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDcim not implemented")
}
func (UnimplementedCpeServiceServer) StartFromPreviousDcim(context.Context, *StartFromPreviousDcimRequest) (*StartDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDcim not implemented")
}
func (UnimplementedCpeServiceServer) StartDcim(context.Context, *StartDcimRequest) (*StartDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDcim not implemented")
}
func (UnimplementedCpeServiceServer) ListDcims(context.Context, *ListDcimsRequest) (*ListDcimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDcims not implemented")
}
func (UnimplementedCpeServiceServer) Subscribe(*SubscribeRequest, CpeService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCpeServiceServer) GetDcim(context.Context, *GetDcimRequest) (*GetDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDcim not implemented")
}
func (UnimplementedCpeServiceServer) Listen(*ListenRequest, CpeService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedCpeServiceServer) StopDcim(context.Context, *StopDcimRequest) (*StopDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDcim not implemented")
}
func (UnimplementedCpeServiceServer) mustEmbedUnimplementedCpeServiceServer() {}

// UnsafeCpeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpeServiceServer will
// result in compilation errors.
type UnsafeCpeServiceServer interface {
	mustEmbedUnimplementedCpeServiceServer()
}

func RegisterCpeServiceServer(s grpc.ServiceRegistrar, srv CpeServiceServer) {
	s.RegisterService(&CpeService_ServiceDesc, srv)
}

func _CpeService_StartLocalDcim_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CpeServiceServer).StartLocalDcim(&cpeServiceStartLocalDcimServer{stream})
}

type CpeService_StartLocalDcimServer interface {
	SendAndClose(*StartDcimResponse) error
	Recv() (*StartLocalDcimRequest, error)
	grpc.ServerStream
}

type cpeServiceStartLocalDcimServer struct {
	grpc.ServerStream
}

func (x *cpeServiceStartLocalDcimServer) SendAndClose(m *StartDcimResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cpeServiceStartLocalDcimServer) Recv() (*StartLocalDcimRequest, error) {
	m := new(StartLocalDcimRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CpeService_StartFromPreviousDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpeServiceServer).StartFromPreviousDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CpeService/StartFromPreviousDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpeServiceServer).StartFromPreviousDcim(ctx, req.(*StartFromPreviousDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpeService_StartDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpeServiceServer).StartDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CpeService/StartDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpeServiceServer).StartDcim(ctx, req.(*StartDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpeService_ListDcims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDcimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpeServiceServer).ListDcims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CpeService/ListDcims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpeServiceServer).ListDcims(ctx, req.(*ListDcimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpeService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CpeServiceServer).Subscribe(m, &cpeServiceSubscribeServer{stream})
}

type CpeService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type cpeServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *cpeServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CpeService_GetDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpeServiceServer).GetDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CpeService/GetDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpeServiceServer).GetDcim(ctx, req.(*GetDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpeService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CpeServiceServer).Listen(m, &cpeServiceListenServer{stream})
}

type CpeService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type cpeServiceListenServer struct {
	grpc.ServerStream
}

func (x *cpeServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CpeService_StopDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpeServiceServer).StopDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CpeService/StopDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpeServiceServer).StopDcim(ctx, req.(*StopDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CpeService_ServiceDesc is the grpc.ServiceDesc for CpeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CpeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CpeService",
	HandlerType: (*CpeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDcim",
			Handler:    _CpeService_StartFromPreviousDcim_Handler,
		},
		{
			MethodName: "StartDcim",
			Handler:    _CpeService_StartDcim_Handler,
		},
		{
			MethodName: "ListDcims",
			Handler:    _CpeService_ListDcims_Handler,
		},
		{
			MethodName: "GetDcim",
			Handler:    _CpeService_GetDcim_Handler,
		},
		{
			MethodName: "StopDcim",
			Handler:    _CpeService_StopDcim_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDcim",
			Handler:       _CpeService_StartLocalDcim_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _CpeService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _CpeService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cpe.proto",
}
